// JS 中的可执行代码：全局代码、函数代码、eval代码
// 当 JS 遇到可执行代码后就会进行“准备工作”，这个“准备工作”就称为“执行上下文”，全局代码对应全局上下文，函数代码对应函数上下文
// 显然，当遇到多段可执行代码时 JS 就会创建多个执行上下文，为此，JS 引擎通过创建执行上下文栈来对这些执行上下文进行管理
// 一旦提到“栈”，马上就会想到其“先进后出”的特性，执行上下文栈也同样如此

// 执行上下文栈的英文名称为：Execution Context Stack，因此我们使用 ECStack 来表示它
// 当 JS 开始要解释执行代码的时候，首先遇到的就是全局代码，所以在初始化 ECStack 的时候首先就会向执行上下文栈压入一个全局执行上下文——globalContext，即 ECStack = [globalContext]，并且只有当整个应用程序结束的时候，ECStack 才会被清空，所以自始至终 ECStack 最底部永远有个 globalContext
// 当 JS 开始执行一个函数的时候就会创建一个执行上下文并把该执行上下文压入执行上下文栈中，当函数执行完毕的时候，就会将此函数的执行上下文从执行上下文栈中弹出

var foo = function () {

    console.log('foo1');

}

foo();  // foo1

var foo = function () {

    console.log('foo2');

}

foo(); // foo2